/*
Copyright (c) Facebook, Inc. and its affiliates.
All rights reserved.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree.
*/

// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import protos "magma/feg/cloud/go/protos"

// ClusterStorage is an autogenerated mock type for the ClusterStorage type
type ClusterStorage struct {
	mock.Mock
}

// DoesKeyExist provides a mock function with given fields: networkID, clusterID
func (_m *ClusterStorage) DoesKeyExist(networkID string, clusterID string) (bool, error) {
	ret := _m.Called(networkID, clusterID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(networkID, clusterID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(networkID, clusterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterState provides a mock function with given fields: networkID, clusterID
func (_m *ClusterStorage) GetClusterState(networkID string, clusterID string) (*protos.ClusterState, error) {
	ret := _m.Called(networkID, clusterID)

	var r0 *protos.ClusterState
	if rf, ok := ret.Get(0).(func(string, string) *protos.ClusterState); ok {
		r0 = rf(networkID, clusterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protos.ClusterState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(networkID, clusterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterState provides a mock function with given fields: networkID, clusterID, logicalID
func (_m *ClusterStorage) UpdateClusterState(networkID string, clusterID string, logicalID string) error {
	ret := _m.Called(networkID, clusterID, logicalID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(networkID, clusterID, logicalID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
